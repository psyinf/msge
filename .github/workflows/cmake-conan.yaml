name: CMake-conan

on:
  push:
    branches: [ "master" , "develop"]
  pull_request:
    branches: [ "master" , "develop"]
  workflow_dispatch:
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install GCC
    # You may pin to the exact commit or the version.
    # uses: egor-tensin/setup-gcc@d04208cef6e985db0830428975fc2ab3f28d89a1
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 11
        platform: x64 
    
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0
      
    - name: Create default profile
      run: conan profile new default --detect
      
    - name: Update profile
      run: |
        conan profile update settings.compiler=gcc default
        conan profile update settings.compiler.version=11 default 
        conan profile update settings.compiler.libcxx=libstdc++11 default
   
    - name: Install dependencies
      run: conan install . -s build_type=${{env.BUILD_TYPE}} --install-folder=${{github.workspace}}/build --build=missing

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
